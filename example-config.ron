(
    // Remove any artifacts created during a previous integration
    // test run before starting.
    clean: true,
    // Keep the git repositories. The following effects take place
    // when this is enabled:
    //
    // + Don't delete git repositories if [Options::clean] is
    //   enabled.
    keep_repos: true,
    // Whether to install install prerequisites. By default this is
    // `true`. Setting this to `false` makes the test faster for
    // development purposes.
    install_prerequisites: true,
    // Whether to run the `aleo-setup-state-monitor` application.
    // Requires `python3` and `pip` to be installed. Only supported
    // on Linux.
    state_monitor: true,
    // Path to where the log files, key files and transcripts are
    // stored.
    out_dir: "out",
    // The code repository for the `aleo-setup` project. Using a
    //local repository.
    aleo_setup_repo: (
         type: "Local",
         dir: "../aleo-setup",
    ),
    // The code repository for the `aleo-setup-coordinator` project.
    // Checking out a remote repository.
    aleo_setup_coordinator_repo: (
        type: "Remote",
        dir: "aleo-setup-coordinator",
        url: "git@github.com:AleoHQ/aleo-setup-coordinator.git",
        branch: "main",
    ),
    // The code repository for the `aleo-setup-state-monitor`
    // project.  Checking out a remote repository.
    aleo_setup_state_monitor_repo: (
        type: "Remote",
        dir: "aleo-setup-state-monitor",
        url: "git@github.com:AleoHQ/aleo-setup-state-monitor.git",
        branch: "include-build",
    ),
    // The address used for the `aleo-setup-state-monitor` web
    // server. By default `127.0.0.1:5001`.
    state_monitor_address: "127.0.0.1:5001",
    // Specifications for the individual tests.
    tests: [
        (
            // Id for the individual test.
            id: "1",
            // Number of verifier participants for the test.
            verifiers: 1,
            // (Optional) Number of replacement contributors for the
            // test. Default: 0
            replacement_contributors: 0,
            // What environment to use for the setup. Possible
            // options: `development`, `inner`, `outer`, `universal`.
            environment: development,
            // (Optional) Time limit for the test (in seconds).
            // Exceeding this will cause the test to fail. If set to
            // `None`  then there is no time limit. Default: `None`
            timout: Some(20),
            // (Optional) Whether to skip running this test. Default:
            // `false`.
            skip: false,
            // Configure the tests performed for each round of the
            // ceremony.
            rounds: [
                // Round 1
                (
                    // Number of contributor participants for this
                    // round of the ceremony.
                    contributors: 2,
                    // (Optional) Configure expected contributor
                    // drops. A contributor from contributors is
                    // assigned automatically to each specified
                    // config. The number of configs should not exceed
                    // the number of contributors. Default: [].
                    contributor_drops: [
                        (
                            // A contributor is dropped (process
                            // killed) after having made this number
                            // of contributions.
                            after_contributions: 10,
                        ),
                    ],
                    // (Optional) Configure when contributors will
                    // start. A contributor from contributors is
                    // assigned automatically to each specified
                    // config. The number of configs should not exceed
                    // the number of contributors. Any contributors
                    // not configured here will be started with the
                    // start of the round as per RoundStart. Default:
                    // [].
                    contributor_starts: [
                        // Contributor 1.
                        // Start the contributor while the current round is waiting for
                        // participants to join.
                        RoundStart,
                        // Contributor 2.
                        // Start a ceremony participant after
                        // specified contributions have been made in
                        // the current round.
                        AfterContributions((
                            contributions: 5
                        ))
                    ]
                ),
                // Round 2
                (
                    // Number of contributor participants for this
                    // round of the ceremony.
                    contributors: 1,
                ),
            ],
        ),
    ],
)